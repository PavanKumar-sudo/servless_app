name: Serverless URL Shortener CI/CD

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1

jobs:
  lint-and-test:
    name: Lint & Unit Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION || '3.12' }}

      - name: Install Python dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          . venv/bin/activate
          flake8 create_link.py redirect.py

      - name: Run Unit Tests
        run: |
          . venv/bin/activate
          PYTHONPATH=. pytest tests/
  sonarqube-scan:
    name: SonarQube Quality Scan
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ vars.PYTHON_VERSION || '3.12' }}

      - name: Install Coverage Tool
        run: |
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
          pip install coverage

      - name: Run Coverage Report
        run: |
          . venv/bin/activate
          coverage run -m pytest
          coverage xml

      - name: Show Coverage %
        run: |
          . venv/bin/activate
          coverage report

      - name: Run SonarQube Scanner
        continue-on-error: false
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          mv sonar-scanner-5.0.1.3006-linux $HOME/sonar-scanner
          export PATH="$HOME/sonar-scanner/bin:$PATH"
          sonar-scanner \
            -Dsonar.projectKey=serverless \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://34.201.20.14:9000 \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.python.version=3.12 \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.qualitygate.wait=true
  
  build-lambda:
    name: Build Lambda Artifacts
    runs-on: ubuntu-latest
    needs: sonarqube-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Lambda Zips
        run: |
          chmod +x ./build_lambda_zip.sh
          ./build_lambda_zip.sh create_link.py create_link.zip
          ./build_lambda_zip.sh redirect.py redirect.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zips
          path: |
            create_link.zip
            redirect.zip

  deploy:
    name: Terraform Init, Plan & Apply
    runs-on: ubuntu-latest
    needs: build-lambda
    outputs:
      api_url: ${{ steps.extract_output.outputs.api_url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Lambda Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-zips

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TF_VERSION || '1.6.0' }}

      - name: Terraform Init, Plan & Apply
        run: |
          terraform init -reconfigure
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Extract API URL
        id: extract_output
        run: echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

  integration-test:
    name: Integration & Alarm Trigger Test
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Basic API Test
        run: |
          echo "Calling deployed API: ${{ needs.deploy.outputs.api_url }}"
          curl -X POST "${{ needs.deploy.outputs.api_url }}/shorten" \
            -H "Content-Type: application/json" \
            -d '{"url": "https://example.com"}'

      - name: Simulate 5xx Errors to Trigger Alarm
        run: |
          for i in {1..20}; do
            curl -X POST -s -o /dev/null -w "%{http_code}\n" "${{ needs.deploy.outputs.api_url }}/shorten?force_error=true" \
                -H "Content-Type: application/json" \
                -d '{"url": "https://example.com"}'
          done
      - name: Send Email on Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "CI/CD Pipeline Failed for ${{ github.repository }}"
          body: |
            Pipeline failed on branch ${{ github.ref_name }}.
            Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: your.email@example.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          secure: true

      - name: Send Slack Notification on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"CI/CD pipeline for `${{ github.repository }}` succeeded on branch `${{ github.ref_name }}`."}' \
          ${{ secrets.SLACK_WEBHOOK }}
